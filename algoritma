Algorithm infix_to_postfix
Step 1 : Start
Step 2 : Initialize the Stack.
Step 3 : Scan the operator from left to right in the infix expression.
Step 4 : If the leftmost character is an operand, set it as the current output to the Postfix string.
          And if the scanned character is the operator and the Stack is empty or contains the '(', ')' symbol, push the operator into the Stack.
          If the scanned operator has higher precedence than the existing precedence operator in the Stack or if the Stack is empty, put it on the Stack.
          If the scanned operator has lower precedence than the existing operator in the Stack, pop all the Stack operators. After that, push the scanned operator into the Stack.
          If the scanned character is a left bracket '(', push it into the Stack.
          If we encountered right bracket ')', pop the Stack and print all output string character until '(' is encountered and discard both the bracket.
Step 5 : Repeat all steps from 2 to 8 until the infix expression is scanned.
Step 6 : Print the Stack output.
Step 7 : Pop and output all characters, including the operator, from the Stack until it is not empty.
Step 8 : End


Algorithm evaluate_postfix
Step 1 : Start
Step 2 : Create a stack to store operands (or values). 
Step 3 : Scan the given expression and do the following for every scanned element. 
          3.1 If the element is a number, push it into the stack 
          3.2 If the element is an operator, pop operands for the operator from the stack. Evaluate the operator and push the result back to the stack 
Step 4 : When the expression is ended, the number in the stack is the final answer
Step 5 : End


Algorithm infix_to_prefix
Step 1 : Start
Step 2 : Reverse the infix expression given in the problem.
Step 3 : Scan the expression from left to right.
Step 4 : Whenever the operands arrive, print them.
          4.1 If the operator arrives and the stack is found to be empty, then simply push the operator into the stack.
          4.2 If the incoming operator has higher precedence than the TOP of the stack, push the incoming operator into the stack.
          4.3 If the incoming operator has the same precedence with a TOP of the stack, push the incoming operator into the stack.
          4.4 If the incoming operator has lower precedence than the TOP of the stack, pop, and print the top of the stack. Test the incoming operator against the top of the stack again and pop the operator from the stack till it finds the operator of a lower precedence or same precedence.
          4.5 If the incoming operator has the same precedence with the top of the stack and the incoming operator is ^, then pop the top of the stack till the condition is true. If the condition is not true, push the ^ operator.
Step 5 : When we reach the end of the expression, pop, and print all the operators from the top of the stack.
Step 6 : If the operator is ')', then push it into the stack.
          If the operator is '(', then pop all the operators from the stack till it finds ) opening bracket in the stack.
          If the top of the stack is ')', push the operator on the stack.
Step 7 : Reverse the output.
Step 8 : End


Algorithm evaluate_prefix
Step 1: Start from the last element of the expression.
Step 2: check the current element.
Step 2.1: if it is an operand, push it to the stack.
Step 2.2: If it is an operator, pop two operands from the stack. Perform the operation and push the elements back to the stack.
Step 3: Do this till all the elements of the expression are traversed and return the top of stack which will be the result of the operation
Step 4 : End
